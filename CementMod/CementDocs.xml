<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CementMod</name>
    </assembly>
    <members>
        <member name="T:CementGB.Mod.CommonHooks">
            <summary>
            Provides some useful hooks for certain in-game events.
            </summary>
        </member>
        <member name="E:CementGB.Mod.CommonHooks.OnMenuFirstBoot">
            <summary>
            Fired when the Menu scene loads for the first time in the app's lifespan. Will reset on application quit.
            </summary>
        </member>
        <member name="T:CementGB.Mod.Mod">
            <summary>
            The main entrypoint for Cement. This is where everything initializes from. Public members include important paths and MelonMod overrides.
            </summary>
        </member>
        <member name="F:CementGB.Mod.Mod.userDataPath">
            <summary>
            Cement's UserData path ("Gang Beasts\UserData\CementGB"). Created in <see cref="M:CementGB.Mod.Mod.OnInitializeMelon"/>.
            </summary>
        </member>
        <member name="F:CementGB.Mod.Mod.customContentPath">
            <summary>
            The directory Cement reads custom content from. Custom content must be in its own folder.
            </summary>
            <remarks>See <see cref="T:CementGB.Mod.Utilities.AddressableUtilities"/> for modded Addressable helpers.</remarks>
        </member>
        <member name="M:CementGB.Mod.Mod.OnInitializeMelon">
            <summary>
            Fires when Cement loads. Since Cement's MelonPriority is set to a very low number, the mod should initialize before any other.
            </summary>
        </member>
        <member name="M:CementGB.Mod.Mod.OnDeinitializeMelon">
            <summary>
            Fires just before Cement is unloaded from the game. Usually this happens when the application closes/crashes, but mods can also be unloaded manually.
            This method saves MelonPreferences for Cement via <c>CementPreferences.Deinitialize()</c>, which is an internal method.
            </summary>
        </member>
        <member name="M:CementGB.Mod.Mod.OnLateInitializeMelon">
            <summary>
            Fires after the first few Unity MonoBehaviour.Start() methods. Creates 
            </summary>
        </member>
        <member name="T:CementGB.Mod.Modules.HookModule">
            <summary>
            This is a really simple hooking library that uses Harmony, basically modular UltiLib.
            It should be used to create custom functionality before or after vanilla methods.
            </summary>
        </member>
        <member name="T:CementGB.Mod.Modules.HookModule.CementHook">
            <summary>
            A struct containing information required to create toggleable Harmony "hooks", or patches, with Cement.
            </summary>
        </member>
        <member name="M:CementGB.Mod.Modules.HookModule.CementHook.#ctor(System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Boolean,MelonLoader.MelonMod)">
            <summary>
            Creates CementHook parameter info to later pass to <see cref="M:CementGB.Mod.Modules.HookModule.CreateHook(CementGB.Mod.Modules.HookModule.CementHook,System.Boolean)"/>.
            </summary>
            <param name="original">Original (typically base-game) method to patch.</param>
            <param name="callingMod">The mod making this patch. Used to toggle the patch on/off with the mod.</param>
            <param name="hook">The method containing the code to insert before or after the <paramref name="original"/> method.</param>
            <param name="isPrefix">Decides when the code will run: <c>true</c> if you want the code to run before the original, <c>false</c> if you want it to run after. Typically to guarantee other mod compatibility, you want to prefer running your code after the base game.</param>
        </member>
        <member name="M:CementGB.Mod.Modules.HookModule.CreateHook(CementGB.Mod.Modules.HookModule.CementHook,System.Boolean)">
            <summary>
            Create a hook (before or after depending on CementHook's <c>isPrefix</c> boolean) on a method that will toggle on and off with the passed MelonMod (WIP).
            </summary>
            <param name="hook">The <see cref="T:CementGB.Mod.Modules.HookModule.CementHook"/> info to patch with.</param>
            <param name="canToggle">Whether the hook can be toggled on/off or not. Currently not functional.</param>
        </member>
        <member name="T:CementGB.Mod.CementPreferences">
            <summary>
            Home to Cement's individual MelonPreferences. If you are looking for the custom Preferences system, please refer back to the docs for <c>PreferenceModule</c>.
            </summary>
        </member>
        <member name="P:CementGB.Mod.CementPreferences.VerboseMode">
            <summary>
            Enables extra log messages for debugging.
            Controlled by a MelonPreference.
            </summary>
        </member>
        <member name="E:CementGB.Mod.Utilities.AddressableUtilities.OnModdedAddressableCatalogLoaded">
            <summary>
            Fires when a modded addressable catalog is registered into the game, after its keys are added to <see cref="P:CementGB.Mod.Utilities.AddressableUtilities.PackAddressableKeys"/>.
            Takes the catalog path as a parameter.
            </summary>
        </member>
        <member name="M:CementGB.Mod.Utilities.AddressableUtilities.CreateModdedAssetReference(System.String)">
            <summary>
            Creates an AssetReference with a new Guid referring to the passed Addressable key. The key does not need to refer to a modded addressable, however this method is designed for that purpose.
            </summary>
            <param name="key">The key to refer to when creating the AssetReference.</param>
            <returns>The created AssetReference.</returns>
        </member>
        <member name="M:CementGB.Mod.Utilities.AddressableUtilities.GetAllModdedResourceLocationsOfType``1">
            <summary>
            Gets all custom-loaded IResourceLocations of a certain result type. Used to iterate through and find addressable keys depending on type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>A generic IEnumerable containing IResourceLocations that, if loaded, will result in the passed type. Will return an IEnumerable even if empty.</returns>
        </member>
        <member name="T:CementGB.Mod.Utilities.AssetBundleUtilities">
            <summary>
            Utilities that make working with AssetBundles easier in the IL2CPP space. Implements shorthand for persistent asset loading and embedded AssetBundles.
            </summary>
        </member>
        <member name="M:CementGB.Mod.Utilities.AssetBundleUtilities.LoadPersistentAsset``1(UnityEngine.AssetBundle,System.String)">
            <summary>
            Shorthand for loading an AssetBundle's asset by name and type in way that prevents it from being garbage collected.
            </summary>
            <typeparam name="T">The type of the asset to load.</typeparam>
            <param name="bundle">The bundle to load the asset from.</param>
            <param name="name">The exact name of the asset to load.</param>
            <returns>The loaded asset with <c>hideFlags</c> set to <c>HideFlags.DontUnloadUnusedAsset</c></returns>
        </member>
        <member name="M:CementGB.Mod.Utilities.AssetBundleUtilities.LoadPersistentAssetAsync``1(UnityEngine.AssetBundle,System.String,System.Action{``0})">
            <summary>
            Shorthand for loading an AssetBundle's asset by name and type in way that prevents it from being garbage collected. This method will execute the callback when async loading is complete.
            </summary>
            <typeparam name="T">The type of the asset to load.</typeparam>
            <param name="bundle">The bundle to load the asset from.</param>
            <param name="name">The exact name of the asset to load.</param>
            <param name="onLoaded">The callback to execute once the asset loads. Takes the loaded asset as a parameter.</param>
        </member>
        <member name="M:CementGB.Mod.Utilities.AssetBundleUtilities.LoadEmbeddedAssetBundle(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an AssetBundle from an assembly that has it embedded. 
            Good for keeping mods small and single-filed. 
            Mark an AssetBundle as an EmbeddedResource in your csproj in order for this to work.
            </summary>
            <param name="assembly">The Assembly instance the AssetBundle is embedded within. Usually it is fine to use <c>Assembly.GetExecutingAssembly()</c> for this.</param>
            <param name="name">The embedded path to the AssetBundle file. Embedded paths usually start with the csproj name and progress by dots, e.g. ExampleMod/Assets/coag.bundle -> ExampleMod.Assets.coag.bundle</param>
            <returns></returns>
            <exception cref="T:System.Exception">Throws if it can't find the AssetBundle within the assembly.</exception>
        </member>
        <member name="T:CementGB.Mod.Utilities.ExtendedStringLoader">
            <summary>
            This class handles simple modded string localization, e.g. "STAGE_GRIND" -> "Grind"
            </summary>
        </member>
        <member name="M:CementGB.Mod.Utilities.ExtendedStringLoader.Register(System.String,System.String)">
            <summary>
            Registers a key-value pair for localization. When the key is loading via GB's <c>StringLoader.LoadString</c> methods, it returns the value string instead.
            </summary>
            <param name="key">A string in uppercase, prefixed with the type of object it is naming, also in uppercase. This will be replaced by <paramref name="value"/> upon load. MUST BE UNIQUE!</param>
            <param name="value">Can be any string in any format. Will replace appearances of <paramref name="key"/>.</param>
        </member>
        <member name="T:CementGB.Mod.Utilities.FileUtilities">
            <summary>
            File-related utilities. Currently only contains <seealso cref="M:CementGB.Mod.Utilities.FileUtilities.ReadEmbeddedText(System.Reflection.Assembly,System.String)"/>.
            </summary>
        </member>
        <member name="M:CementGB.Mod.Utilities.FileUtilities.ReadEmbeddedText(System.Reflection.Assembly,System.String)">
            <summary>
            Reads all text from an embedded file. File must be marked as an EmbeddedResource in the mod's csproj.
            </summary>
            <param name="assembly">The assembly the file is embedded in. Its usually okay to use <c>Assembly.GetExecutingAssembly</c> or <c>MelonMod.MelonAssembly.Assembly</c> to get the current assembly.</param>
            <param name="resourceName">The embedded path to the file. Usually you can just use the path pseudo-relative to the solution directory separated by dots, e.g. ExampleMod/Assets/text.txt ExampleMod.Assets.text.txt</param>
            <returns>The text the file contains.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
    </members>
</doc>
